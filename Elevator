using System;
using System.Collections.Generic;

/*
A building has n floors.
It has an elevator that is controlled by two buttons only: UP and DOWN. 

By pressing the UP button, the elevator will go exactly a floors up.
By pressing the DOWN button, the elevator will go exactly b floors down.

If the elevator is commanded to go lower than the first floor or higher than the n-th floor, it will refuse to move and remain on its current floor.

The elevator starts on the k-th floor. Count how many times the buttons should be pressed to move the elevator to the m-th floor.

** Entrée
Line 1: 5 space separated integers in order: n a b k m

** Sortie
One line that contains 1 integer - minimal number of buttons pressed, required to move the elevator to the floor m.

If it is impossible to move the elevator to the floor m, print IMPOSSIBLE

** Contraintes
1 ≤ n ≤ 10000
1 ≤ a ≤ n
1 ≤ b ≤ n
1 ≤ k ≤ n
1 ≤ m ≤ n
*/

namespace Elevator
{
    class Trip
    {
        public int BPressCount;
        public int CurrentFloor;
        
        public Trip(int cFloor)
        {
            BPressCount = 0;
            CurrentFloor = cFloor;
        }
    }

    class Solution
    {
        #region Params
        public static int FloorCount;
        static int Up;
        static int Down;
        static int StartFloor;
        static int TargetFloor;
        #endregion

        static void init()
        {
            string[] inputs = Console.ReadLine().Split(' ');
            FloorCount = int.Parse(inputs[0]);
            Up = int.Parse(inputs[1]);
            Down = int.Parse(inputs[2]);
            StartFloor = int.Parse(inputs[3]) -1;   // -1 because it's zero based indexes
            TargetFloor = int.Parse(inputs[4]) -1;  //  ""
            Console.Error.WriteLine("{0} floors\n{1} up {2} down", FloorCount, Up, Down);
            Console.Error.WriteLine("Starting at {0} to go to {1}", StartFloor, TargetFloor);
        }

        static void Main(string[] args)
        {
            init();
            var alreadyVisited = new bool [FloorCount];
            var trips = new Queue<Trip>();
            
            trips.Enqueue(new Trip(StartFloor));
            alreadyVisited[StartFloor] = true;
            while (0 != trips.Count)
            {
                var cTripU = trips.Dequeue();
                var cFloor = cTripU.CurrentFloor;
                
                // Up ! Up ! Up ! Up !
                cTripU.BPressCount++;
                cTripU.CurrentFloor += Up;
                if (cTripU.CurrentFloor > FloorCount-1)
                    cTripU.CurrentFloor -= Up;
                if (TargetFloor == cTripU.CurrentFloor)
                {
                    Console.WriteLine("{0}", cTripU.BPressCount);
                    return;
                }
                if (!alreadyVisited[cTripU.CurrentFloor])
                {
                    alreadyVisited[cTripU.CurrentFloor] = true;
                    trips.Enqueue(cTripU);
                }

                // Going down :(
                var cTripD = new Trip(cFloor-Down);
                cTripD.BPressCount = cTripU.BPressCount;
                if (cTripD.CurrentFloor < 0)
                    cTripD.CurrentFloor += Down;

                if (TargetFloor == cTripD.CurrentFloor)
                {
                    Console.WriteLine("{0}", cTripD.BPressCount);
                    return;
                }
                if (!alreadyVisited[cTripD.CurrentFloor])
                {
                    alreadyVisited[cTripD.CurrentFloor] = true;
                    trips.Enqueue(cTripD);
                }
            }
            Console.WriteLine("IMPOSSIBLE");
        }
    }
}
