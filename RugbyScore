/*
Given a rugby score, your program must compute the different scoring combinations that lead to that particular score.
As a reminder:
- a try is worth 5 points
- after a try, a transformation kick is played and is worth 2 extra points if successful
- penalty kicks and drops are worth 3 points
Entrée
Line 1: the score
Sortie
N lines: number of tries, number of transformations, number of penalties / drops, separated by spaces
The combinations must be ordered by increasing order of tries, then transformations, then penalties/drops
Contraintes
No impossible scores are given, there is always at least one valid combination.

Exemple
Entrée
12

Sortie
0 0 4
2 1 0
*/
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;

namespace RugbyScore
{
    class Score
    {
        public int Tries;
        public int Trans;
        public int Pen;

        public Score()
        {
            this.Tries = 0;
            this.Trans = 0;
            this.Pen = 0;
        }

        public Score(Score model)
        {
            this.Tries = model.Tries;
            this.Trans = model.Trans;
            this.Pen = model.Pen;
        }

        public int Value()
        {
            return Tries*5 + Trans*2 + Pen*3;
        }
    }
    
    /**
     * Auto-generated code below aims at helping you parse
     * the standard input according to the problem statement.
     **/
    class Solution
    {
        static List<Score>    PossibleScores;
        
        static void AddPossibleScore(Score newOne)
        {
            foreach (var sc in PossibleScores)
            {
                if (sc.Tries == newOne.Tries
                 && sc.Trans == newOne.Trans
                 && sc.Pen == newOne.Pen)
                 return;
            }
            PossibleScores.Add(newOne);
        }

        static void FindPossibleScores(int target)
        {
            var tmpLst = new Queue<Score>();
            tmpLst.Enqueue(new Score());
            while (tmpLst.Count != 0)
            {
                var sc = tmpLst.Dequeue();
                var val = sc.Value();
                if (val+2 <= target)
                {
                    if(sc.Tries > sc.Trans)
                    {
                        var s1 = new Score(sc);
                        s1.Trans++;
                        if (s1.Value() == target)
                            AddPossibleScore(s1);
                        else
                            tmpLst.Enqueue(s1);
                    }
                    if (val+3 <= target)
                    {
                        var s2 = new Score(sc);
                        s2.Pen++;
                        if (s2.Value() == target)
                            AddPossibleScore(s2);
                        else
                            tmpLst.Enqueue(s2);

                        if (val+5 <= target)
                        {
                            var s3 = new Score(sc);
                            s3.Tries++;
                            if (s3.Value() == target)
                                AddPossibleScore(s3);
                            else
                                tmpLst.Enqueue(s3);
                        }
                    }
                }
            }
        }
        
        static void Main(string[] args)
        {
            PossibleScores = new List<Score>();

            int N = int.Parse(Console.ReadLine());

            Console.Error.WriteLine("Score to evaluate :{0}", N);
            FindPossibleScores(N);

            var orderedList = from score in PossibleScores
                              orderby score.Tries, score.Trans, score.Pen
                              select score;
                                
            foreach (var s in orderedList)
            {
                Console.WriteLine(String.Format("{0} {1} {2}", s.Tries, s.Trans, s.Pen));
            }
        }
    }
}
